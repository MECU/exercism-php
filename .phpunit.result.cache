C:37:"PHPUnit\Runner\DefaultTestResultCache":6904:{a:2:{s:7:"defects";a:47:{s:33:"MinesweeperTest::testAnEmptyBoard";i:4;s:43:"MinesweeperTest::testBoardWithOneMineToLeft";i:3;s:44:"MinesweeperTest::testBoardWithOneMineToRight";i:3;s:48:"MinesweeperTest::testBoardWithAMineToTopAndRight";i:4;s:61:"MinesweeperTest::testBoardWithAMineToBottomAndLeftAndDiagonal";i:4;s:38:"MinesweeperTest::testAComplicatedBoard";i:4;s:40:"MinesweeperTest::testCanOnlyContainMines";i:3;s:60:"MinesweeperTest::testAnIncompleteSideBorderThrowsAnException";i:3;s:64:"MinesweeperTest::testABoardWithLessThan2SquaresThrowsAnException";i:3;s:37:"MinesweeperTest::testRowsOfSameLength";i:3;s:32:"WordProblemTest::testTooAdvanced";i:3;s:31:"WordProblemTest::testIrrelevant";i:3;s:50:"FlattenArrayTest::testArrayWithJustIntegersPresent";i:3;s:38:"FlattenArrayTest::testFiveLevelNesting";i:3;s:37:"FlattenArrayTest::testSixLevelNesting";i:4;s:52:"FlattenArrayTest::testSixLevelNestListWithNullValues";i:3;s:50:"FlattenArrayTest::testAllValuesInNestedListAreNull";i:4;s:40:"AccumulateTest::testAccumulateUpperCases";i:4;s:41:"BinaryTest::testItParsesBinary0ToDecimal0";i:3;s:41:"BinaryTest::testItParsesBinary1ToDecimal1";i:3;s:30:"BinaryTest::testItParsesDigits";i:3;s:32:"BinaryTest::testItParsesHundreds";i:3;s:30:"BinaryTest::testItParsesMaxInt";i:3;s:46:"BinaryTest::testItParsesValuesWithLeadingZeros";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #0";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #1";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #2";i:3;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #3";i:3;s:32:"SumOfMultiplesTest::testSumToTen";i:3;s:35:"SumOfMultiplesTest::testSumToTwenty";i:3;s:36:"SumOfMultiplesTest::testSumToHundred";i:3;s:37:"SumOfMultiplesTest::testSumToThousand";i:3;s:41:"SumOfMultiplesTest::testConfigureToTwenty";i:3;s:42:"SumOfMultiplesTest::testConfigureToFifteen";i:3;s:43:"SumOfMultiplesTest::testConfigureToOneFifty";i:3;s:45:"SumOfMultiplesTest::testConfigureToFortySeven";i:3;s:47:"SumOfMultiplesTest::testMultiplesOfOneToHundred";i:3;s:44:"SumOfMultiplesTest::testMultiplesOfEmptyList";i:4;s:33:"RobotSimulatorTest::testTurnRight";i:4;s:32:"RobotSimulatorTest::testTurnLeft";i:4;s:31:"RobotSimulatorTest::testAdvance";i:4;s:36:"RobotSimulatorTest::testInstructions";i:3;s:45:"RobotSimulatorTest::testMalformedInstructions";i:3;s:44:"RobotSimulatorTest::testInstructionsChaining";i:4;s:30:"RobotSimulatorTest::testCreate";i:4;s:26:"BinaryTreeTest::testCreate";i:3;s:27:"BinaryTreeTest::testCreate2";i:3;}s:5:"times";a:81:{s:31:"GradeSchoolTest::testAddStudent";d:0;s:43:"GradeSchoolTest::testAddStudentsinSameGrade";d:0;s:48:"GradeSchoolTest::testAddStudentInDifferentGrades";d:0;s:31:"GradeSchoolTest::testEmptyGrade";d:0;s:31:"GradeSchoolTest::testSortSchool";d:0;s:33:"MinesweeperTest::testAnEmptyBoard";d:0;s:60:"MinesweeperTest::testAnIncompleteSideBorderThrowsAnException";d:0;s:59:"MinesweeperTest::testAnIncompleteTopBorderThrowsAnException";d:0;s:52:"MinesweeperTest::testAMissingCornerThrowsAnException";d:0;s:64:"MinesweeperTest::testABoardWithLessThan2SquaresThrowsAnException";d:0;s:37:"MinesweeperTest::testRowsOfSameLength";d:0;s:40:"MinesweeperTest::testCanOnlyContainMines";d:0;s:43:"MinesweeperTest::testBoardWithOneMineToLeft";d:0;s:44:"MinesweeperTest::testBoardWithOneMineToRight";d:0;s:48:"MinesweeperTest::testBoardWithAMineToTopAndRight";d:0;s:61:"MinesweeperTest::testBoardWithAMineToBottomAndLeftAndDiagonal";d:0;s:38:"MinesweeperTest::testAComplicatedBoard";d:0;s:25:"WordProblemTest::testAdd1";d:0;s:25:"WordProblemTest::testAdd2";d:0;s:39:"WordProblemTest::testAddNegativeNumbers";d:0;s:34:"WordProblemTest::testAddMoreDigits";d:0;s:29:"WordProblemTest::testSubtract";d:0;s:29:"WordProblemTest::testMultiply";d:0;s:27:"WordProblemTest::testDivide";d:0;s:29:"WordProblemTest::testAddTwice";d:0;s:36:"WordProblemTest::testAddThenSubtract";d:0;s:34:"WordProblemTest::testSubtractTwice";d:0;s:36:"WordProblemTest::testSubtractThenAdd";d:0;s:34:"WordProblemTest::testMultiplyTwice";d:0;s:36:"WordProblemTest::testAddThenMultiply";d:0;s:32:"WordProblemTest::testDivideTwice";d:0;s:32:"WordProblemTest::testTooAdvanced";d:0;s:31:"WordProblemTest::testIrrelevant";d:0;s:36:"FlattenArrayTest::testWithOutNesting";d:0;s:50:"FlattenArrayTest::testArrayWithJustIntegersPresent";d:0;s:38:"FlattenArrayTest::testFiveLevelNesting";d:0;s:37:"FlattenArrayTest::testSixLevelNesting";d:0;s:52:"FlattenArrayTest::testSixLevelNestListWithNullValues";d:0;s:50:"FlattenArrayTest::testAllValuesInNestedListAreNull";d:0;s:35:"AccumulateTest::testAccumulateEmpty";d:0;s:37:"AccumulateTest::testAccumulateSquares";d:0;s:40:"AccumulateTest::testAccumulateUpperCases";d:0;s:45:"AccumulateTest::testAccumulateReversedStrings";d:0;s:39:"AccumulateTest::testAccumulateConstants";d:0;s:46:"AccumulateTest::testAccumulateWithinAccumulate";d:0;s:50:"AccumulateTest::testAccumulateUsingBuiltInFunction";d:0;s:47:"AccumulateTest::testAccumulateUsingStaticMethod";d:0;s:41:"AccumulateTest::testAccumulateUsingInvoke";d:0;s:57:"AccumulateTest::testAccumulateUsingObjectAndArrayNotation";d:0;s:41:"BinaryTest::testItParsesBinary0ToDecimal0";d:0;s:41:"BinaryTest::testItParsesBinary1ToDecimal1";d:0;s:30:"BinaryTest::testItParsesDigits";d:0;s:32:"BinaryTest::testItParsesHundreds";d:0;s:30:"BinaryTest::testItParsesMaxInt";d:0;s:46:"BinaryTest::testItParsesValuesWithLeadingZeros";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #0";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #1";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #2";d:0;s:75:"BinaryTest::testItOnlyAcceptsStringsContainingZerosAndOnes with data set #3";d:0;s:32:"SumOfMultiplesTest::testSumToOne";d:0;s:34:"SumOfMultiplesTest::testSumToThree";d:0;s:32:"SumOfMultiplesTest::testSumToTen";d:0;s:35:"SumOfMultiplesTest::testSumToTwenty";d:0;s:36:"SumOfMultiplesTest::testSumToHundred";d:0;s:37:"SumOfMultiplesTest::testSumToThousand";d:0.001;s:41:"SumOfMultiplesTest::testConfigureToTwenty";d:0;s:42:"SumOfMultiplesTest::testConfigureToFifteen";d:0;s:43:"SumOfMultiplesTest::testConfigureToOneFifty";d:0;s:45:"SumOfMultiplesTest::testConfigureToFortySeven";d:0.008;s:47:"SumOfMultiplesTest::testMultiplesOfOneToHundred";d:0;s:44:"SumOfMultiplesTest::testMultiplesOfEmptyList";d:0;s:30:"RobotSimulatorTest::testCreate";d:0;s:33:"RobotSimulatorTest::testTurnRight";d:0;s:32:"RobotSimulatorTest::testTurnLeft";d:0;s:31:"RobotSimulatorTest::testAdvance";d:0;s:36:"RobotSimulatorTest::testInstructions";d:0;s:45:"RobotSimulatorTest::testMalformedInstructions";d:0;s:44:"RobotSimulatorTest::testInstructionsChaining";d:0;s:26:"BinaryTreeTest::testCreate";d:0;s:27:"BinaryTreeTest::testCreate2";d:0;s:27:"BinaryTreeTest::testCreate3";d:0;}}}